from Bio.SeqUtils.ProtParam import ProteinAnalysis as PA
from modlamp.descriptors import PeptideDescriptor, GlobalDescriptor
from sklearn.model_selection import train_test_split
import pandas as pd
import os, re, math, platform
from tqdm import tqdm
from collections import Counter
import numpy as np
from itertools import product
from Bio.Seq import Seq
from Bio import SeqIO

_AALetter = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']

AAProperties = {
    'Hydrophobicity': {'A': 1.8, 'R': -4.5, 'N': -3.5, 'D': -3.5, 'C': 2.5,
                       'Q': -3.5, 'E': -3.5, 'G': -0.4, 'H': -3.2, 'I': 4.5,
                       'L': 3.8, 'K': -3.9, 'M': 1.9, 'F': 2.8, 'P': -1.6,
                       'S': -0.8, 'T': -0.7, 'W': -0.9, 'Y': -1.3, 'V': 4.2}
}

def get_aan_corpus(n=2):
    n_corpus = []
    if n <= 2:
        for i in _AALetter:
            for j in _AALetter:
               n_corpus.append("{}{}".format(i, j))
        return n_corpus
    for i in get_aan_corpus(n - 1):
        for j in _AALetter:
            n_corpus.append("{}{}".format(i, j))
    return n_corpus

def get_ngram_counts(seq, n=2):
    ngrams = [seq[i: i + n] for i in range(len(seq) - n + 1)]
    n_corpus = get_aan_corpus(n)
    ngram_stat = {}
    for aa_ng in n_corpus:
        ngram_stat['{}|{}'.format(n, aa_ng)] = ngrams.count(aa_ng) / len(ngrams) * 100
    return ngram_stat

def generateGroupPairs(groupKey):
    gPair = {}
    for key1 in groupKey:
        for key2 in groupKey:
            gPair['CKSAAGP|'+key1+'.'+key2] = 0
    return gPair

def cksaagp(fastas, gap=5):
    if gap < 0:
        return 0
    if minSequenceLength(fastas) < gap + 2:
        return 0
    group = {'aliphatic': 'GAVLMI',
             'aromatic': 'FYW',
             'postivecharge': 'KRH',
             'negativecharge': 'DE',
             'uncharge': 'STCPNQ'}
    AA = 'ARNDCQEGHILKMFPSTWYV'
    groupKey = group.keys()
    index = {}
    for key in groupKey:
        for aa in group[key]:
            index[aa] = key
    gPairIndex = []
    for key1 in groupKey:
        for key2 in groupKey:
            gPairIndex.append('CKSAAGP|'+key1+'.'+key2)
    encodings = []
    header = ['#']
    for g in range(gap + 1):
        for p in gPairIndex:
            header.append(p+'.gap'+str(g))
    encodings.append(header)
    for i in fastas:
        name, sequence = i[0], re.sub('-', '', i[1])
        code = [name]
        for g in range(gap + 1):
            gPair = generateGroupPairs(groupKey)
            sum = 0
            for p1 in range(len(sequence)):
                p2 = p1 + g + 1
                if p2 < len(sequence) and sequence[p1] in AA and sequence[p2] in AA:
                    gPair['CKSAAGP|'+index[sequence[p1]]+'.'+index[sequence[p2]]] += 1
                    sum += 1
            if sum == 0:
                for gp in gPairIndex:
                    code.append(0)
            else:
                for gp in gPairIndex:
                    code.append(gPair[gp] / sum)
        encodings.append(code)
    return encodings

def calculate_PAAC(seq, lambdaValue=30, properties=AAProperties):
    paac_features = []
    for property_name, values in properties.items():
        avg = np.mean(list(values.values()))
        std = np.std(list(values.values()))
        normalized_values = {aa: (value - avg) / std for aa, value in values.items()}
        properties[property_name] = normalized_values
    for i in range(1, lambdaValue + 1):
        paac_value = 0
        for j in range(len(seq) - i):
            aa1 = seq[j]
            aa2 = seq[j + i]
            for property_name in properties.keys():
                paac_value += abs(properties[property_name][aa1] - properties[property_name][aa2])
        paac_value /= (len(seq) - i)
        paac_features.append(paac_value)
    return paac_features

def add_physicochemical_features(seq_df):
    seq_df['Molecular Weight'] = 0.0
    seq_df['Isoelectric Point'] = 0.0
    for index, row in seq_df.iterrows():
        seq = str(row['Sequence'])
        analyzed_seq = ProteinAnalysis(seq)
        seq_df.at[index, 'Molecular Weight'] = analyzed_seq.molecular_weight()
        seq_df.at[index, 'Isoelectric Point'] = analyzed_seq.isoelectric_point()
    return seq_df

def construct_features(seq_df, paaclamb=4, paacw=0.5):
    seq_df = insert_aac(seq_df)
    seq_df = insert_ngrams(seq_df, n=2)
    seq_df = insert_cksaagp(seq_df, gap=3)
    seq_df = insert_paac(seq_df, lamb=paaclamb, w=paacw)
    seq_df = add_physicochemical_features(seq_df)
    return seq_df

def write_fasta(df, file_path, abbr_columns=None):
    Seqrecords = [SeqIO.SeqRecord(id=row['Id'], 
                              seq=Seq.Seq(row['Sequence']), 
                              description='|'.join(row[abbr_columns] if abbr_columns is not None else "")) \
             for idn, row in df.iterrows()]
    with open(file_path, 'w+') as fhandle:
        SeqIO.write(Seqrecords, fhandle, "fasta-2line")

def read_fasta(fname):
    with open(fname, "r") as f:
        seq_dict = [(record.id, record.seq._data) for record in SeqIO.parse(f, "fasta")]
    seq_df = pd.DataFrame(data=seq_dict, columns=["Id", "Sequence"])
    return seq_df

df_ACP = read_fasta("/path/to/your/file")
df_ACP['Sequence'] = df_ACP['Sequence'].apply(lambda seq: seq.decode('utf-8'))
features_train = construct_features(df_ACP)
features_train.to_csv("/path/to/your/file")

df_ACP = read_fasta("/path/to/your/file")
df_ACP['Sequence'] = df_ACP['Sequence'].apply(lambda seq: seq.decode('utf-8'))
features_train = construct_features(df_ACP)
features_train.to_csv("/path/to/your/file")
